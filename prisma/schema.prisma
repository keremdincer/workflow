// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  firstName String
  lastName  String
  password  String
  signature String   @default(uuid())
  active    Boolean  @default(true)
  createdAt DateTime @default(now())

  roles    Role[]
  contacts Contact[]

  projects Project[]
  branch   Branch[]
}

model Role {
  id    Int    @id @default(autoincrement())
  label String
  users User[]
}

model Project {
  id           Int           @id @default(autoincrement())
  name         String
  // ???
  users        User[]
  // ???
  corporations Corporation[]
}

model Corporation {
  id        Int      @id @default(autoincrement())
  name      String
  // ???
  address   String
  city      String
  district  String
  // ???
  project   Project? @relation(fields: [projectId], references: [id])
  projectId Int?

  // Hangi ürün tiplerinin faturalandırılabileceği
  billableItemTypes ItemType[]
}

model Branch {
  id       Int      @id @default(autoincrement())
  name     String
  // ???
  address  String
  city     String
  district String
  // ???
  users    User[]
  exports  Export[]
}

model Contact {
  id        Int    @id @default(autoincrement())
  telephone String
  user      User   @relation(fields: [userId], references: [id])
  userId    Int
}

model Export {
  id            Int        @id @default(autoincrement())
  reservationNo Int
  type          String // Çıkış, Transfer
  branch        Branch     @relation(fields: [branchId], references: [id])
  branchId      Int
  closedAt      DateTime? // Onaylandığını buradan check ediyoruz.
  createdAt     DateTime   @default(now())
  shippings     Shipping[]
  items         Item[]
}

model Shipping {
  id         Int     @id @default(autoincrement())
  shippingNo Int
  type       String // Kurulum, İade, Transfer
  status     String
  createdAt  Boolean
  export     Export  @relation(fields: [exportId], references: [id])
  exportId   Int
}

model ItemType {
  id    Int    @id @default(autoincrement())
  items Item[]

  // Ürün tipinin faturalandırılabildiği firmalar.
  billableCorporations Corporation[]
}

model Item {
  id         Int      @id @default(autoincrement())
  macAddress String?  @unique
  serialNo   String?
  barcode    String?
  location   String?
  status     String? // => Kuruldu, Depolandı vs vs Sahadan sahaya projeden projeye değişebilir.
  active     Boolean  @default(true)
  itemType   ItemType @relation(fields: [itemTypeId], references: [id])
  itemTypeId Int
  export     Export   @relation(fields: [exportId], references: [id])
  exportId   Int
}

// model Report {
//   id           Int        @id @default(autoincrement())
//   project      Project    @relation(fields: [projectId], references: [id])
//   projectId    Int
//   reportType   ReportType @relation(fields: [reportTypeId], references: [id])
//   reportTypeId Int
// }

// model ReportType {
//   id      Int      @id @default(autoincrement())
//   title   String
//   reports Report[]
// }

// model ReportSection {
//   id Int @id @default(autoincrement())
// }
